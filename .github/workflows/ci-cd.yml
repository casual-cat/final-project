name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger workflow on push to the main branch

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10 # Use a valid Python version

      # Step 3: Install dependencies and run tests
      - name: Install dependencies and test
        run: |
          pip install -r requirements.txt
          pytest

      # Step 4: Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t gabidelcea/my-flask-app:${{ github.sha }} .
          docker tag gabidelcea/my-flask-app:${{ github.sha }} gabidelcea/my-flask-app:latest

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push gabidelcea/my-flask-app:${{ github.sha }}
          docker push gabidelcea/my-flask-app:latest

  deploy-to-ec2:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/${{ secrets.EC2_SSH_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          docker pull gabidelcea/my-flask-app:latest
          docker stop my-flask-app || true
          docker rm my-flask-app || true
          docker run -d --name my-flask-app -p 80:5000 -p 443:5000 \
            -v /etc/letsencrypt:/etc/letsencrypt:ro \
            gabidelcea/my-flask-app:latest
          EOF
