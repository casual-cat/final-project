name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger workflow on push to the main branch

jobs:
  build-and-test:
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'

      # Step 3: Install dependencies and run tests
      - name: Install dependencies and test
        run: |
          pip install -r requirements.txt
          pytest

      # Step 4: Build Docker image
      - name: Build Docker Image
        run: |
          docker build -t gabidelcea/my-flask-app:${{ github.sha }} .
          docker tag gabidelcea/my-flask-app:${{ github.sha }} gabidelcea/my-flask-app:latest

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push gabidelcea/my-flask-app:${{ github.sha }}
          docker push gabidelcea/my-flask-app:latest

  deploy-to-ec2:
    needs: build-and-test
    runs-on: ubuntu-20.04

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH key for EC2
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem

      # Step 3: Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull gabidelcea/my-flask-app:latest
            docker stop my-flask-app || true
            docker rm my-flask-app || true
            docker run -d --name my-flask-app -p 80:5000 -p 443:5000 \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              gabidelcea/my-flask-app:latest
